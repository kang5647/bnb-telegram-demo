import{c as a,A as k,a as p,s as E,d as x,b as G,e as b,f as z,g as w,h as K,i as D,j as M,k as F,l as _,m as L,G as P,n as q,o as $,p as B,q as V,r as H,S as f,t as h}from"./loadSts-C-LYJlvY.js";import{y as Ae,C as ye,E as fe,w as ge,I as he,x as Ie,v as Te,M as Re,P as We,R as ve,u as ke}from"./loadSts-C-LYJlvY.js";import"./lazy-json-GAqC3xmD.js";import{c as j}from"./create-aggregated-client-sX0lpe6c.js";import{C as l,g as d,a as c}from"./index-BfzuQKzC.js";import{b as Ee}from"./index-BfzuQKzC.js";import"./constants-EOWnxGfz.js";import"./noAuth-BRTlyyWt.js";import"./index-D2QwjoYc.js";class U extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithSAML",{}).n("STSClient","AssumeRoleWithSAMLCommand").f(k,p).ser(E).de(x).build(){}class I extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(G,b).ser(z).de(w).build(){}class N extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","DecodeAuthorizationMessage",{}).n("STSClient","DecodeAuthorizationMessageCommand").f(void 0,void 0).ser(K).de(D).build(){}class J extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","GetAccessKeyInfo",{}).n("STSClient","GetAccessKeyInfoCommand").f(void 0,void 0).ser(M).de(F).build(){}class Q extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","GetCallerIdentity",{}).n("STSClient","GetCallerIdentityCommand").f(void 0,void 0).ser(_).de(L).build(){}class X extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","GetFederationToken",{}).n("STSClient","GetFederationTokenCommand").f(void 0,P).ser(q).de($).build(){}class Y extends l.classBuilder().ep({...a}).m(function(t,i,n,s){return[d(n,this.serialize,this.deserialize),c(n,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","GetSessionToken",{}).n("STSClient","GetSessionTokenCommand").f(void 0,B).ser(V).de(H).build(){}const Z={AssumeRoleCommand:h,AssumeRoleWithSAMLCommand:U,AssumeRoleWithWebIdentityCommand:I,DecodeAuthorizationMessageCommand:N,GetAccessKeyInfoCommand:J,GetCallerIdentityCommand:Q,GetFederationTokenCommand:X,GetSessionTokenCommand:Y};class O extends f{}j(Z,O);const g="us-east-1",T=async(e,t,i)=>{var r;const n=typeof e=="function"?await e():e,s=typeof t=="function"?await t():t;return(r=i==null?void 0:i.debug)==null||r.call(i,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${n} (provider)`,`${s} (parent client)`,`${g} (STS default)`),n??s??g},ee=(e,t)=>{let i,n;return async(s,r)=>{var m,u,S;if(n=s,!i){const{logger:C=(m=e==null?void 0:e.parentClientConfig)==null?void 0:m.logger,region:A,requestHandler:y=(u=e==null?void 0:e.parentClientConfig)==null?void 0:u.requestHandler,credentialProviderLogger:W}=e,v=await T(A,(S=e==null?void 0:e.parentClientConfig)==null?void 0:S.region,W);i=new t({credentialDefaultProvider:()=>async()=>n,region:v,requestHandler:y,logger:C})}const{Credentials:o}=await i.send(new h(r));if(!o||!o.AccessKeyId||!o.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRole call with role ${r.RoleArn}`);return{accessKeyId:o.AccessKeyId,secretAccessKey:o.SecretAccessKey,sessionToken:o.SessionToken,expiration:o.Expiration,credentialScope:o.CredentialScope}}},te=(e,t)=>{let i;return async n=>{var r,o,m;if(!i){const{logger:u=(r=e==null?void 0:e.parentClientConfig)==null?void 0:r.logger,region:S,requestHandler:C=(o=e==null?void 0:e.parentClientConfig)==null?void 0:o.requestHandler,credentialProviderLogger:A}=e,y=await T(S,(m=e==null?void 0:e.parentClientConfig)==null?void 0:m.region,A);i=new t({region:y,requestHandler:C,logger:u})}const{Credentials:s}=await i.send(new I(n));if(!s||!s.AccessKeyId||!s.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${n.RoleArn}`);return{accessKeyId:s.AccessKeyId,secretAccessKey:s.SecretAccessKey,sessionToken:s.SessionToken,expiration:s.Expiration,credentialScope:s.CredentialScope}}},R=(e,t)=>t?class extends e{constructor(n){super(n);for(const s of t)this.middlewareStack.use(s)}}:e,ne=(e={},t)=>ee(e,R(f,t)),se=(e={},t)=>te(e,R(f,t)),ue=e=>t=>e({roleAssumer:ne(t),roleAssumerWithWebIdentity:se(t),...t});export{l as $Command,h as AssumeRoleCommand,Ae as AssumeRoleResponseFilterSensitiveLog,U as AssumeRoleWithSAMLCommand,k as AssumeRoleWithSAMLRequestFilterSensitiveLog,p as AssumeRoleWithSAMLResponseFilterSensitiveLog,I as AssumeRoleWithWebIdentityCommand,G as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,b as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,ye as CredentialsFilterSensitiveLog,N as DecodeAuthorizationMessageCommand,fe as ExpiredTokenException,J as GetAccessKeyInfoCommand,Q as GetCallerIdentityCommand,X as GetFederationTokenCommand,P as GetFederationTokenResponseFilterSensitiveLog,Y as GetSessionTokenCommand,B as GetSessionTokenResponseFilterSensitiveLog,ge as IDPCommunicationErrorException,he as IDPRejectedClaimException,Ie as InvalidAuthorizationMessageException,Te as InvalidIdentityTokenException,Re as MalformedPolicyDocumentException,We as PackedPolicyTooLargeException,ve as RegionDisabledException,O as STS,f as STSClient,ke as STSServiceException,Ee as __Client,ue as decorateDefaultCredentialProvider,ne as getDefaultRoleAssumer,se as getDefaultRoleAssumerWithWebIdentity};
